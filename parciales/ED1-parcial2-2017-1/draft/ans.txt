1. Si ingresamos los elementos en ese orden, obtendriamos el siguiente arbol.
			12
		3		7
	2		5
1				8
					9
Entonces vemos que antes de encontra el numero 8, en el arbol se llega al nodo que
contiene el numero 12, luego el nodo que tiene el numero 3, luego el nodo que contiene
el numero 5 y por ultimo el nodo que contiene el numero 8 (que no se cuenta). Entonces el
total de nodos recorridos es 3. De ésta manera, la respuesta es c.
2. La forma mas optima es utilizar un solo ciclo, ya que podemos simular su recursion.
Para lo cual la respuesta seria la c.
3. O(log n). Asi la respuesta seria la d.
4.El codigo seria el siguiente.
public int solucionar(int n, int a, int b, int c){
	//Claramente si n es menor que los otros valores, no se puede obtener ninguna
	//combinacion.
	if(n == 0 || (n < a && n < b && n < c)){
		return 0;
	}
	//Probemos restando el valor de "a" a n.
	int res = solucionar(n - a, a, b, c) + 1;
	//Maximicemos el resultado quitandole b a n.
	res = max(res, solucionar(n - b, a, b, c) + 1);
	//Maximicemos el resultado quitandole c a n.
	res = max(res, solucionar(n -c, a, b, c) + 1);	
	return res;
}
5. La altura la podemos encontrar analizando si a la izquierda hay mas nodos hacia
a bajo o si a la derecha hay mas nodos hacia abajo. El codigo se veria así.
Class Nodo{
	Nodo izq;
	Nodo der;
	int dato;
}
int altura(Nodo raíz){
	// Caso base
	if(raíz == null)
		return 0;
	Int izq =altura(raiz.izq);
	Int der =altura(raiz.der);
	return max(izq, der);
}
6. Construyamos primero el arbol.
					7
				4		9
			1		5		13
				2		12		15
									18
										23
											78
										34
Si hacemos un inorden del arbol, obtendriamos.
1, 2, 4, 5, 7, 9, 12, 13, 15, 18, 23, 34, 78.
Entonces la respuesta seria la a.
7. Es clar que si cambiamos 
double l1 = (l*3+r )/2; por 
doublé l1 = (l * 2 + r) / 2;
el codigo funciona correctamente.
